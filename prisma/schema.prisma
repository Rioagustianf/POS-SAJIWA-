// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roleId    Int
  role      Role     @relation(fields: [roleId], references: [id])
  
  // Relasi
  transactions Transaction[] @relation("userTransactions")
  createdProducts Product[]  @relation("productCreatedBy")
  updatedProducts Product[]  @relation("productUpdatedBy")
  createdTransactions Transaction[] @relation("transactionCreatedBy")
  updatedTransactions Transaction[] @relation("transactionUpdatedBy")
  auditLogs     AuditLog[]
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique // Kasir, Admin, Manajer
  
  // Relasi
  users User[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  price       Int
  stock       Int
  description String?
  image       String?
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById Int
  updatedById Int
  
  // Relasi
  createdBy      User            @relation("productCreatedBy", fields: [createdById], references: [id])
  updatedBy      User            @relation("productUpdatedBy", fields: [updatedById], references: [id])
  transactionItems TransactionItem[]
}

model Transaction {
  id            Int      @id @default(autoincrement())
  userId        Int
  totalAmount   Int
  date          DateTime @default(now())
  paymentMethod String
  status        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdById   Int
  updatedById   Int
  
  // Relasi
  user          User            @relation("userTransactions", fields: [userId], references: [id])
  createdBy     User            @relation("transactionCreatedBy", fields: [createdById], references: [id])
  updatedBy     User            @relation("transactionUpdatedBy", fields: [updatedById], references: [id])
  transactionItems TransactionItem[]
}

model TransactionItem {
  id            Int      @id @default(autoincrement())
  transactionId Int
  productId     Int
  quantity      Int
  subtotal      Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relasi
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  product       Product     @relation(fields: [productId], references: [id])
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  userId      Int
  action      String   // create, update, delete
  description String?
  tableName   String   // nama tabel yang diubah
  recordId    Int      // id record yang diubah
  oldData     Json?    // data sebelum perubahan
  newData     Json?    // data setelah perubahan
  createdAt   DateTime @default(now())
  
  // Relasi
  user        User     @relation(fields: [userId], references: [id])
}

model SystemSetting {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  updatedById Int
  updatedAt  DateTime @updatedAt
}